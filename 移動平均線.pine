//ラインの色はMAの方向で変化し、上向きのときは緑色、下向きのときは赤色になります。
//https://jp.tradingview.com/script/pJ2ndFEf-Moving-Average-Colored-EMA-SMA/?offer_id=10&aff_id=24685
//Created by Robert Nance on 072315


study(title="Moving Average Colored EMA/SMA", shorttitle="Colored EMA /SMA", overlay=true)
emaplot = input (true, title="Show EMA on chart")
len = input(8, minval=1, title="ema Length")
src = close
out = ema(src, len)
up = out > out[1]
down = out < out[1]
mycolor = up ? green : down ? red : blue
plot(out and emaplot ? out :na, title="EMA", color=mycolor, linewidth=3)





//200EMA（移動平均線）のスクリプト例
//https://note.com/investment_note/n/nd33a3e1a9fab

// @version=4

study(title="Exponential Moving Average", shorttitle="[test] 200EMA", overlay=true)

// angle
angle(_src) =>
   rad2degree=180/3.14159265359
   ang=rad2degree*atan((_src[0] - _src[1])/atr(50)) 

// 200MA
len1 = input(200, minval=1, title="EMA #1")
src1 = input(close, title="EMA Source #1")
out1 = ema(src1, len1)

// 線の角度によって色を変更
a1 = angle(out1)
c1 = color.aqua
if(a1<0)
   c1 := color.maroon

// 表示処理
plot(out1, title="EMA #1", color = c1, linewidth = 4)

// 傾きによって背景色を変更
bg = color.white
if(a1 >= 0)
   bg := color.new(color.teal, 90)
else
   bg := color.new(color.maroon, 90)

bgcolor(color=bg)





//最大8本の上位足移動平均線を下位足チャートに表示できます。
//各移動平均線の時間足は個別に変更でき、また各ラインの期間や種類、時間足がラインの右端にラベル表示されます。
//https://jp.tradingview.com/script/IzmSs7Ma-Multi-Timeframe-Moving-Average-xdecow/?offer_id=10&aff_id=24685

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © xdecow

//@version=4
study("Multi Timeframe Moving Average [xdecow]", shorttitle='MTF MA [xdecow]', overlay=true)

lwidth  = 3


//------------------------------------------------------------------------------
// Inputs

// i_convertLen = input(true, 'Convert length to resolution')

i_showType  = input(true, 'Show MA Type')
i_showLen   = input(true, 'Show MA Length')
i_showRes   = input(true, 'Show Resolution')
i_loffset   = input(0, 'Label offset', minval=0, type=input.integer)

i_enabled1  = input(true, '#1 Enabled ------------------------------------------------')
i_res1      = input('', '#1 Resolution', type=input.resolution)
i_len1      = input(20, '#1 Length')
i_type1     = input('EMA', '#1 MA type', options=['SMA', 'EMA', 'DEMA', 'VWMA', 'RMA', 'WMA'])
i_color1    = input(#e57373, '#1 Color')

i_enabled2  = input(true, '#2 Enabled ------------------------------------------------')
i_res2      = input('', '#2 Resolution', type=input.resolution)
i_len2      = input(50, '#2 Length')
i_type2     = input('EMA', '#2 MA type', options=['SMA', 'EMA', 'DEMA', 'VWMA', 'RMA', 'WMA'])
i_color2    = input(#ba68c8, '#2 Color')

i_enabled3  = input(true, '#3 Enabled ------------------------------------------------')
i_res3      = input('', '#3 Resolution', type=input.resolution)
i_len3      = input(200, '#3 Length')
i_type3     = input('EMA', '#3 MA type', options=['SMA', 'EMA', 'DEMA', 'VWMA', 'RMA', 'WMA'])
i_color3    = input(#4dd0e1, '#3 Color')

i_enabled4  = input(true, '#4 Enabled ------------------------------------------------')
i_res4      = input('1D', '#4 Resolution', type=input.resolution)
i_len4      = input(72, '#4 Length')
i_type4     = input('EMA', '#4 MA type', options=['SMA', 'EMA', 'DEMA', 'VWMA', 'RMA', 'WMA'])
i_color4    = input(#ffee58, '#4 Color')

i_enabled5  = input(false, '#5 Enabled ------------------------------------------------')
i_res5      = input('', '#5 Resolution', type=input.resolution)
i_len5      = input(72, '#5 Length')
i_type5     = input('EMA', '#5 MA type', options=['SMA', 'EMA', 'DEMA', 'VWMA', 'RMA', 'WMA'])
i_color5    = input(#ffee58, '#5 Color')

i_enabled6  = input(false, '#6 Enabled ------------------------------------------------')
i_res6      = input('', '#6 Resolution', type=input.resolution)
i_len6      = input(72, '#6 Length')
i_type6     = input('EMA', '#6 MA type', options=['SMA', 'EMA', 'DEMA', 'VWMA', 'RMA', 'WMA'])
i_color6    = input(#ffee58, '#6 Color')

i_enabled7  = input(false, '#7 Enabled ------------------------------------------------')
i_res7      = input('', '#7 Resolution', type=input.resolution)
i_len7      = input(72, '#7 Length')
i_type7     = input('EMA', '#7 MA type', options=['SMA', 'EMA', 'DEMA', 'VWMA', 'RMA', 'WMA'])
i_color7    = input(#ffee58, '#7 Color')

i_enabled8  = input(false, '#8 Enabled ------------------------------------------------')
i_res8      = input('', '#8 Resolution', type=input.resolution)
i_len8      = input(72, '#8 Length')
i_type8     = input('EMA', '#8 MA type', options=['SMA', 'EMA', 'DEMA', 'VWMA', 'RMA', 'WMA'])
i_color8    = input(#ffee58, '#8 Color')


//------------------------------------------------------------------------------
// Funcs

getOffset() =>
    tab = ''
    if i_loffset > 0
        for i = 1 to i_loffset
            tab := tab + '    '
    tab


dema(_src, _length) =>
    e1 = ema(_src, _length)
    e2 = ema(e1, _length)
    2 * e1 - e2


ma(_type, _len) =>
    if _type == 'EMA'
        ema(close, _len)
    else if _type == 'DEMA'
        dema(close, _len)
    else if _type == 'VWMA'
        vwma(close, _len)
    else if _type == 'RMA'
        rma(close, _len)
    else if _type == 'WMA'
        wma(close, _len)
    else
        sma(close, _len)    


resToString(_res) =>
    if _res == ''
        ''
    else if _res == '1'
        '1m'
    else if _res == '3'
        '3m'
    else if _res == '5'
        '5m'
    else if _res == '15'
        '15m'
    else if _res == '30'
        '30m'
    else if _res == '45'
        '45m'
    else if _res == '60'
        '1h'
    else if _res == '120'
        '2h'
    else if _res == '180'
        '3h'
    else if _res == '240'
        '4h'
    else if _res == '1D'
        'D'
    else if _res == '1W'
        'W'
    else if _res == '1M'
        'M'
    else
        _res


getPeriodFactor() =>
    // D = 24 * 60
    // W = 7 * D
    // M = 4 * W
    timeframe.isintraday ? timeframe.multiplier : 
      timeframe.isdaily ? 1440 : 
      timeframe.isweekly ? 10080 : 
      40320 


resToInt(_res) =>
    if _res == ''
        getPeriodFactor()
    else if _res == '1'
        1
    else if _res == '3'
        3
    else if _res == '5'
        5
    else if _res == '15'
        15
    else if _res == '30'
        30
    else if _res == '45'
        45
    else if _res == '60'
        60
    else if _res == '120'
        120
    else if _res == '180'
        180
    else if _res == '240'
        240
    else if _res == '1D'
        1440
    else if _res == '1W'
        10080
    else if _res == '1M'
        40320
    else
        na



addMaLabel(_enabled, _price, _res, _type, _len, _color) =>

    label l = na

    if _enabled

        t = ''
        
        if i_showType
            t := _type
        if i_showLen
            t := t + (t != '' ? ' ' : '') + tostring(_len)
        if i_showRes and _res != ''
            t := t + (t != '' ? ' / ': '') + resToString(_res)
        
        if t != ''
        
            l := label.new(bar_index,
              na(_price) ? close : _price,
              text=getOffset() + t, 
              color=color.new(color.black, 100), 
              textcolor=_color,
              style=label.style_label_left,
              textalign=text.align_left,
              yloc=yloc.price
              )   
            label.delete(l[1])


convertResLength(_targetRes, _targetLength) =>
    resToInt(_targetRes) * _targetLength / getPeriodFactor()


// getMaConverted(_res, _type, _len) =>
//     _ma = ma(_type, _len)
//     [tmpma, lastma, t1, t2] = security(syminfo.tickerid, _res, [_ma, _ma[1], time, time_close], barmerge.gaps_off, barmerge.lookahead_on)
    
//     int bars = na
    
//     if _res == '1M'
//         mperiod = (t2 - t1) / 60000
//         bars := mperiod / getPeriodFactor()
//     else
//         targetres = resToInt(_res)
//         curres = getPeriodFactor()
//         bars := targetres / curres
    
    
//     inc = (tmpma - lastma) / bars
    

//     float v = lastma
//     v := na(v[1]) ? lastma : v[1] + inc
//     // lastma
//     // bars



getMaConverted(_res, _type, _len) =>
    _ma = ma(_type, _len)
    
    [m, bindex] = security(syminfo.tickerid, _res, [_ma, bar_index])
    
    int lbindex = na
    lbindex := na(lbindex[1]) or bindex > lbindex[1] ? bindex : lbindex[1]
    
    lbindex != lbindex[1] or barstate.islast ? m : na

        
    
// getMaConverted(_res, _type, _len) =>
//     clen = convertResLength(_res, _len)
//     convert = _res != '' and i_convertLen and clen < 5000 and getPeriodFactor() < resToInt(_res)
//     // convert = _res != '' and i_convertLen and clen < 5000
//     res = convert ? '' : _res
//     len = convert ? clen : _len
    
//     macur = ma(_type, len)
//     mares = security(syminfo.tickerid, res, macur, barmerge.gaps_on, barmerge.lookahead_off)
    
//     convert ? mares : macur

//------------------------------------------------------------------------------
// Plots


k_ma1 = getMaConverted(i_res1, i_type1, i_len1)
plot(i_enabled1 ? k_ma1 : na, color=i_color1, linewidth=lwidth, title='MA 1', join=true)
addMaLabel(i_enabled1, k_ma1, i_res1, i_type1, i_len1, i_color1)

k_ma2 = getMaConverted(i_res2, i_type2, i_len2)
plot(i_enabled2 ? k_ma2 : na, color=i_color2, linewidth=lwidth, title='MA 2', join=true)
addMaLabel(i_enabled2, k_ma2, i_res2, i_type2, i_len2, i_color2)

k_ma3 = getMaConverted(i_res3, i_type3, i_len3)
plot(i_enabled3 ? k_ma3 : na, color=i_color3, linewidth=lwidth, title='MA 3', join=true)
addMaLabel(i_enabled3, k_ma3, i_res3, i_type3, i_len3, i_color3)

k_ma4 = getMaConverted(i_res4, i_type4, i_len4)
plot(i_enabled4 ? k_ma4 : na, color=i_color4, linewidth=lwidth, title='MA 4', join=true)
addMaLabel(i_enabled4, k_ma4, i_res4, i_type4, i_len4, i_color4)

k_ma5 = getMaConverted(i_res5, i_type5, i_len5)
plot(i_enabled5 ? k_ma5 : na, color=i_color5, linewidth=lwidth, title='MA 5', join=true)
addMaLabel(i_enabled5, k_ma5, i_res5, i_type5, i_len5, i_color5)

k_ma6 = getMaConverted(i_res6, i_type6, i_len6)
plot(i_enabled6 ? k_ma6 : na, color=i_color6, linewidth=lwidth, title='MA 6', join=true)
addMaLabel(i_enabled6, k_ma6, i_res6, i_type6, i_len6, i_color6)

k_ma7 = getMaConverted(i_res7, i_type7, i_len7)
plot(i_enabled7 ? k_ma7 : na, color=i_color7, linewidth=lwidth, title='MA 7', join=true)
addMaLabel(i_enabled7, k_ma7, i_res7, i_type7, i_len7, i_color7)

k_ma8 = getMaConverted(i_res8, i_type8, i_len8)
plot(i_enabled8 ? k_ma8 : na, color=i_color8, linewidth=lwidth, title='MA 8', join=true)
addMaLabel(i_enabled8, k_ma8, i_res8, i_type8, i_len8, i_color8)





//2本のEMAで囲まれた領域を色塗りし、1種の雲としてチャートに表示します。
//他にも、上位足のEMAで構成する雲を表示したり、雲を終値でブレイクアウトするとアラートで知らせる機能も搭載されています。
//https://jp.tradingview.com/script/dBM8A0fs-Multi-Time-Frame-EMA-Cloud/?offer_id=10&aff_id=24685

//@version=1

//Created by Ripster on July 30, 2019
study("Multi Time Frame Dual EMA Cloud ", "MTF EMA Cloud", overlay=true)
ma_len1 = input(title="Short EMA Length", type=integer, defval=50)
ma_len2 = input(title="Long EMA Length", type=integer, defval=100)
src = input(title="Source", type=source, defval=close)
ma_offset = input(title="Offset", type=integer, defval=0)
res = input(title="Resolution", type=resolution, defval="240")
htf_ma1 = ema(src, ma_len1)
htf_ma2 = ema(src, ma_len2)
out1 = security(tickerid, res, htf_ma1)
out2 = security(tickerid, res, htf_ma2)
//plot(out1, color=green, offset=ma_offset)
//plot(out2, color=red, offset=ma_offset)



//lengthshort = input(8, minval = 1, title = "Short EMA Length")
//lengthlong = input(200, minval = 2, title = "Long EMA Length")
//emacloudleading = input(50, minval = 0, title = "Leading Period For EMA Cloud")
//src = input(hl2, title = "Source")
showlong = input(true, title = "Show Long Alerts")
showshort = input(true, title = "Show Short Alerts")
emacloudleading = input(0, minval = 0, title = "Leading Period For EMA Cloud")
mashort = out1
malong = out2

cloudcolour = mashort >= malong ? green : red

mashortcolor = mashort >= mashort[1] ? olive : maroon
mashortline = plot(mashort, color = mashortcolor, linewidth = 1, offset = emacloudleading, title = "Short Leading EMA")
malongcolor = malong >= malong[1] ? green : red
malongline = plot(malong, color = malongcolor, linewidth = 3, offset = emacloudleading, title = "Long Leading EMA")
fill(mashortline, malongline, color = cloudcolour, transp = 85, title = "MA Cloud")

bullish = malong[emacloudleading] > mashort[emacloudleading] and crossover(close, malong[emacloudleading])
bearish = malong[emacloudleading] < mashort[emacloudleading] and crossunder(close, malong[emacloudleading])

plotchar(bullish and showlong, char = '▲', title = "Long", location = location.abovebar, color = olive, text = "Long", textcolor = olive)
plotchar(bearish and showshort, char = '▼', title = "Short", location = location.belowbar, color = red, text = "Short", textcolor = maroon)
alertcondition(bullish, title = "LEMAC Long", message = "Leading EMA Cloud - Long")
alertcondition(bearish, title = "LEMAC Short", message = "Leading EMA Cloud - Short")