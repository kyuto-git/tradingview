//@version=5
indicator("Linear Regression Channel + BEST Supertrend CCI", shorttitle="LinReg + BEST ST CCI", overlay=true, precision=6)


// BEST Supertrend CCIは、たった1つの線でトレードの開始や終了のタイミングを示し、取引チャンスがない時にはローソク足がインジケーターに隠れることで無駄な取引を避けることができます。
// インジケーターは、CCIとATR（Average True Range）の2つの指標を組み合わせて使用しています。CCIがメインで、ATRを活用してトレンドラインを引き、それを損切りラインとしても活用できるように設定されています。
// トレンドの発生はCCIで判断し、CCIが0以上で上昇トレンド、0以下で下降トレンドと判断します。この0以上0以下のポイントはパラメータで自由に変更可能です。

// チャート上での具体的な分析例では、トレンドラインが右肩上がりになっている時は上昇トレンド、右肩下がりになっている時は下降トレンドと判断されます。レンジ相場では、緑色と赤色の線が短期間で交互に変化し、ローソク足がインジケーターに隠れることで取引を避けるべき状況を示します。
// トレンド転換のタイミングは、CCIが0の位置で赤色と緑色の線が切り替わる時に発生します。CCIがマイナスからプラスに切り替わる時は上昇トレンドへの転換、プラスからマイナスに切り替わる時は下降トレンドへの転換を示します。
// トレンド転換のタイミングは早く表示されるが、トレンドの初期には騙し（誤ったサイン）が多いため、注意が必要です。トレンドが発生するタイミングを見抜く明確な基準がないため、他のインジケーターとの組み合わせが推奨されています。
// オシレーター系のインジケーターと組み合わせることが有効であり、トレンド系のインジケーターを複数使用する場合は、チャートが見づらくならないかどうかを考慮することが重要です。

// パラメータは無理に変更する必要ない
// 損切りラインの位置を変更したい場合はFactorの値を変更
// トレンドの初期は特にダマシが多い




cci_source = input(close)

// CCIの設定
// CCIの期間設定は、相場の状況やFX取引スタイルによって異なります。
// 短期的なトレードをする場合は、期間を短く設定することが一般的です。一方、長期的なトレードをする場合は、期間を長く設定することが適しています。
// ちなみに、開発者であるドナルド・ランバート氏は、14本のローソク足を1つの周期としたことから、デフォルトの期間は14日に設定されており、そのままのツールで利用するプロトレーダーの人も多くいます。

cci_period = input(14, "CCI Period")
cci = ta.cci(cci_source, cci_period)
ML = input(0, "CCI Mid Line pivot")

// Supertrendのファクターと期間
// ATRを日足で使う場合は14日間の移動平均値を使います。
// また、1時間足や4時間足でATRを使う場合は、パラメータを2〜10に設定するのが一般的です。一方、週足や月足でATRを使う場合は、パラメータを20〜50にするのが一般的です。
// エントリー価格からATRを5倍した値を利確確定や損切り値として設定する方法がおすすめです。

Factor = input.float(3, title="[ST] Factor", minval=1, maxval=100)
// Factor=input(3,title="[ST] Factor", minval=1,maxval = 100, type=input.float)
Pd = input.int(10, title="[ST] PD", minval=1, maxval=100)

// Supertrendの計算関数
f_supertrend(Factor, Pd) =>
    Up = hl2 - (Factor * ta.atr(Pd))
    Dn = hl2 + (Factor * ta.atr(Pd))
    TrendUp = 0.0
    TrendUp := cci[1] > ML ? math.max(Up, TrendUp[1]) : Up
    TrendDown = 0.0
    TrendDown := cci[1] < ML ? math.min(Dn, TrendDown[1]) : Dn
    Trend = 0.0
    Trend := cci > ML ? 1 : cci < ML ? -1 : nz(Trend[1], 1)
    Tsl = Trend == 1 ? TrendUp : TrendDown
    Tsl

st_tsl = f_supertrend(Factor, Pd)

// Supertrendラインのプロット
linecolor = close >= st_tsl ? color.green : color.red
plot(st_tsl, color=linecolor, linewidth=4, title="SuperTrend", transp=0)



///////////////////////////////////////
// Linear Regression Channel

// ピアソン係数が1に近ければ近いほど、トレンドが強い。0.7以上はトレンドと見做して良い
// ハイエントリーを狙うならチャネルの下半分の赤い部分にいるときに狙う
// ローエントリーを狙うならチャネルの上半分の青い部分にいるときに狙う

// 係数が０に近い場合はレンジ相場。0.15以下はレンジと見做して良さそう
// ハイエントリーを狙うならチャネルの下半分の赤い部分にいるときに狙う
// ローエントリーを狙うならチャネルの上半分の青い部分にいるときに狙う
// なのは変わらないが、オシレーター系インジケータ（RSIとかストキャスティクスとか）と組み合わせるとトレードしやすい状況



lengthInput = input.int(100, title="Length", minval = 1, maxval = 5000)
sourceInput = input.source(close, title="Source")

group1 = "Channel Settings"
useUpperDevInput = input.bool(true, title="Upper Deviation", inline = "Upper Deviation", group = group1)
upperMultInput = input.float(2.0, title="", inline = "Upper Deviation", group = group1)
useLowerDevInput = input.bool(true, title="Lower Deviation", inline = "Lower Deviation", group = group1)
lowerMultInput = input.float(2.0, title="", inline = "Lower Deviation", group = group1)

group2 = "Display Settings"
showPearsonInput = input.bool(true, "Show Pearson's R", group = group2)
extendLeftInput = input.bool(false, "Extend Lines Left", group = group2)
extendRightInput = input.bool(true, "Extend Lines Right", group = group2)
extendStyle = switch
    extendLeftInput and extendRightInput => extend.both
    extendLeftInput => extend.left
    extendRightInput => extend.right
    => extend.none

group3 = "Color Settings"
colorUpper = input.color(color.new(color.blue, 85), "", inline = group3, group = group3)
colorLower = input.color(color.new(color.red, 85), "", inline = group3, group = group3)

calcSlope(source, length) =>
    max_bars_back(source, 5000)
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to length - 1 by 1
            val = source[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
        slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
        average = sumY / length
        intercept = average - slope * sumX / length + slope
        [slope, average, intercept]
        
[s, a, i] = calcSlope(sourceInput, lengthInput)
startPrice = i + s * (lengthInput - 1)
endPrice = i
var line baseLine = na
if na(baseLine) and not na(startPrice)
    baseLine := line.new(bar_index - lengthInput + 1, startPrice, bar_index, endPrice, width=1, extend=extendStyle, color=color.new(colorLower, 0))
else
    line.set_xy1(baseLine, bar_index - lengthInput + 1, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)
    na
    
calcDev(source, length, slope, average, intercept) =>
    upDev = 0.0
    dnDev = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = length - 1
    daY = intercept + slope * periods / 2
    val = intercept
    for j = 0 to periods by 1
        price = high[j] - val
        if price > upDev
            upDev := price
        price := val - low[j]
        if price > dnDev
            dnDev := price
        price := source[j]
        dxt = price - average
        dyt = val - daY
        price -= val
        stdDevAcc += price * price
        dsxx += dxt * dxt
        dsyy += dyt * dyt
        dsxy += dxt * dyt
        val += slope
    stdDev = math.sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
    pearsonR = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt(dsxx * dsyy)
    [stdDev, pearsonR, upDev, dnDev]
    
[stdDev, pearsonR, upDev, dnDev] = calcDev(sourceInput, lengthInput, s, a, i)
upperStartPrice = startPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
upperEndPrice = endPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
var line upper = na
lowerStartPrice = startPrice + (useLowerDevInput ? -lowerMultInput * stdDev : -dnDev)
lowerEndPrice = endPrice + (useLowerDevInput ? -lowerMultInput * stdDev : -dnDev)
var line lower = na
if na(upper) and not na(upperStartPrice)
    upper := line.new(bar_index - lengthInput + 1, upperStartPrice, bar_index, upperEndPrice, width=1, extend=extendStyle, color=color.new(colorUpper, 0))
else
    line.set_xy1(upper, bar_index - lengthInput + 1, upperStartPrice)
    line.set_xy2(upper, bar_index, upperEndPrice)
    na
if na(lower) and not na(lowerStartPrice)
    lower := line.new(bar_index - lengthInput + 1, lowerStartPrice, bar_index, lowerEndPrice, width=1, extend=extendStyle, color=color.new(colorUpper, 0))
else
    line.set_xy1(lower, bar_index - lengthInput + 1, lowerStartPrice)
    line.set_xy2(lower, bar_index, lowerEndPrice)
    na
linefill.new(upper, baseLine, color = colorUpper)
linefill.new(baseLine, lower, color = colorLower)
    
// Pearson's R
var label r = na
label.delete(r[1])
if showPearsonInput and not na(pearsonR)
    r := label.new(bar_index - lengthInput + 1, lowerStartPrice, str.tostring(pearsonR, "#.################"), color = color.new(color.white, 100), textcolor=color.new(colorUpper, 0), size=size.normal, style=label.style_label_up)